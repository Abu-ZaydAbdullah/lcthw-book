
   Learn C The Hard Way A Learn Code The Hard Way Book
     * Book
     * Comments
     * Video Courses
     * Related Books

   [next] [prev] [prev-tail] [tail] [up]

Chapter 10
Exercise 9: Arrays And Strings

   In the last exercise you went through an introduction to creating basic
   arrays and how they map to strings. In this exercise we'll more
   completely show the similarity between arrays and strings, and get into
   more about memory layouts.

   This exercise shows you that C stores its strings simply as an array of
   bytes, terminated with the '\0' (nul) byte. You probably clued into
   this in the last exercise since we did it manually. Here's how we do it
   in another way to make it even more clear by comparing it to an array
   of numbers:
     __________________________________________________________________

   Source 27: ex9.c
   1  #include <stdio.h>
   2
   3  int main(int argc, char *argv[])
   4  {
   5      int numbers[4] = {0};
   6      char name[4] = {'a'};
   7
   8      // first, print them out raw
   9      printf("numbers: %d %d %d %d\n",
   10              numbers[0], numbers[1],
   11              numbers[2], numbers[3]);
   12
   13      printf("name each: %c %c %c %c\n",
   14              name[0], name[1],
   15              name[2], name[3]);
   16
   17      printf("name: %s\n", name);
   18
   19      // setup the numbers
   20      numbers[0] = 1;
   21      numbers[1] = 2;
   22      numbers[2] = 3;
   23      numbers[3] = 4;
   24
   25      // setup the name
   26      name[0] = 'Z';
   27      name[1] = 'e';
   28      name[2] = 'd';
   29      name[3] = '\0';
   30
   31      // then print them out initialized
   32      printf("numbers: %d %d %d %d\n",
   33              numbers[0], numbers[1],
   34              numbers[2], numbers[3]);
   35
   36      printf("name each: %c %c %c %c\n",
   37              name[0], name[1],
   38              name[2], name[3]);
   39
   40      // print the name like a string
   41      printf("name: %s\n", name);
   42
   43      // another way to use name
   44      char *another = "Zed";
   45
   46      printf("another: %s\n", another);
   47
   48      printf("another each: %c %c %c %c\n",
   49              another[0], another[1],
   50              another[2], another[3]);
   51
   52      return 0;
   53  }
     __________________________________________________________________

   In this code, we setup some arrays the tedious way, by assigning a
   value to each element. In numbers we are setting up numbers, but in
   name we're actually building a string manually.

10.1 What You Should See

   When you run this code you should see first the arrays printed with
   their contents initialized to zero, then in its initialized form:
     __________________________________________________________________

   Source 28: ex9 output
   1$ make ex9
   2cc -Wall -g    ex9.c   -o ex9
   3$ ./ex9
   4numbers: 0 0 0 0
   5name each: a
   6name: a
   7numbers: 1 2 3 4
   8name each: Z e d
   9name: Zed
   10another: Zed
   11another each: Z e d
   12$
     __________________________________________________________________

   You'll notice some interesting things about this program:
    1. I didn't have to give all 4 elements of the arrays to initialize
       them. This is a short-cut that C has where, if you set just one
       element, it'll fill the rest in with 0.
    2. When each element of numbers is printed they all come out as 0.
    3. When each element of name is printed, only the first element 'a'
       shows up because the '\0' character is special and won't display.
    4. Then the first time we print name it only prints "a" because, since
       the array will be filled with 0 after the first 'a' in the
       initializer, then the string is correctly terminated by a '\0'
       character.
    5. We then setup the arrays with a tedious manual assignment to each
       thing and print them out again. Look at how they changed. Now the
       numbers are set, but see how the name string prints my name
       correctly?
    6. There's also two syntaxes for doing a string: char name[4] = {'a'}
       on line 6 vs. char *another = "name" on line 44. The first one is
       less common and the second is what you should use for string
       literals like this.

   Notice that I'm using the same syntax and style of code to interact
   with both an array of integers and an array of characters, but that
   printf thinks that the name is just a string. Again, this is because to
   the C language there's no difference between a string and an array of
   characters.

   Finally, when you make string literals you should usually use the
   char *another = "Literal" syntax. This works out to be the same thing,
   but it's more idiomatic and easier to write.

10.2 How To Break It

   The source of almost all bugs in C come from forgetting to have enough
   space, or forgetting to put a '\0' at the end of a string. In fact it's
   so common and hard to get right that the majority of good C code just
   doesn't use C style strings. In later exercises we'll actually learn
   how to avoid C strings completely.

   In this program the key to breaking it is to forget to put the '\0'
   character at the end of the strings. There's a few ways to do this:

    1. Get rid of the initializers that setup name.
    2. Accidentally set name[3] = 'A'; so that there's no terminator.
    3. Set the initializer to {'a','a','a','a'} so there's too many 'a'
       characters and no space for the '\0' terminator.

   Try to come up with some other ways to break this, and as usual run all
   of these under Valgrind so you can see exactly what is going on and
   what the errors are called. Sometimes you'll make these mistakes and
   even Valgrind can't find them, but try moving where you declare the
   variables to see if you get the error. This is part of the voodoo of C,
   that sometimes just where the variable is located changes the bug.

10.3 Extra Credit

    1. Assign the characters into numbers and then use printf to print
       them a character at a time. What kind of compiler warnings did you
       get?
    2. Do the inverse for name, trying to treat it like an array of int
       and print it out one int at a time. What does Valgrind think of
       that?
    3. How many other ways can you print this out?
    4. If an array of characters is 4 bytes long, and an integer is 4
       bytes long, then can you treat the whole name array like it's just
       an integer? How might you accomplish this crazy hack?
    5. Take out a piece of paper and draw out each of these arrays as a
       row of boxes. Then do the operations you just did on paper to see
       if you get them right.
    6. Convert name to be in the style of another and see if the code
       keeps working.

   [next] [prev] [prev-tail] [front] [up]
     __________________________________________________________________

   Please enable JavaScript to view the comments powered by Disqus.

Take An Online Video Course

   You can sign up for a video course at:

   http://www.udemy.com/learn-c-the-hard-way/

   This course is currently being built at the same time that the book is
   being built, but if you sign up now then you get early access to both
   the videos and PDF of the book.

Related Books

   You might want to check out these other books in the series:
    1. Learn Ruby The Hard Way
    2. Learn Regex The Hard Way
    3. Learn SQL The Hard Way
    4. Learn C The Hard Way
    5. Learn Python The Hard Way

   I'll be referencing other books shortly.

   Copyright 2011 Zed A. Shaw. All Rights Reserved.
