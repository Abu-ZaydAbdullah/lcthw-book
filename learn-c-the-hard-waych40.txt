
   Learn C The Hard Way A Learn Code The Hard Way Book
     * Book
     * Comments
     * Video Courses
     * Related Books

   [next] [prev] [prev-tail] [tail] [up]

Chapter 40
Exercise 39: String Algorithms

   In this exercise I'm going to show you one of the supposedly faster
   string search algorithms, and compare it to the one that exists in
   bstrlib.c call binstr. The documentation for binstr says that it uses a
   simple "brute force" string search to find the first instance. The one
   I'll implement will use the Boyer-Moore-Horspool (BMH) algorithm, which
   is supposed to be faster if you analyze the theoretical time. You'll
   see that, assuming my implementation isn't flawed, that the practical
   time for BMH is much worse than the simple brute force of binstr.

   The point of this exercise isn't really to explain the algorithm
   because it's simple enough for you to go to the Boyer-Moore-Horspool
   Wikipedia page and read it. The gist of this algorithm is that it
   calculates a "skip characters list" as a first operation, then it uses
   this list to quickly scan through the string. It is supposed to be
   faster than brute force, so let's get the code into the right files and
   see.

   First, I have the header:
     __________________________________________________________________

   Source 123: src/lcthw/string_algos.h
   1  #ifndef string_algos_h
   2  #define string_algos_h
   3
   4  #include <lcthw/bstrlib.h>
   5  #include <lcthw/darray.h>
   6
   7  typedef struct StringScanner {
   8      bstring in;
   9      const unsigned char *haystack;
   10      ssize_t hlen;
   11      const unsigned char *needle;
   12      ssize_t nlen;
   13      size_t skip_chars[UCHAR_MAX + 1];
   14  } StringScanner;
   15
   16  int String_find(bstring in, bstring what);
   17
   18  StringScanner *StringScanner_create(bstring in);
   19
   20  int StringScanner_scan(StringScanner *scan, bstring tofind);
   21
   22  void StringScanner_destroy(StringScanner *scan);
   23
   24  #endif
     __________________________________________________________________

   In order to see the effects of this "skip characters list" I'm going to
   make two versions of the BMH algorithm:

   String_find
          Simply find the first instance of one string in another, doing
          the entire algorithm in one shot.

   StringScanner_scan
          Uses a StringScanner state structure to separate the skip list
          build from the actual find. This will let me see what impact
          that has on performance. This model also has the advantage that
          I can incrementally scan for one string in another and find all
          instances quickly.

   Once you have that, here's the implementation:
     __________________________________________________________________

   Source 124: src/lcthw/string_algos.c
   1  #include <lcthw/string_algos.h>
   2  #include <limits.h>
   3
   4  static inline void String_setup_skip_chars(
   5          size_t *skip_chars,
   6          const unsigned char *needle, ssize_t nlen)
   7  {
   8      size_t i = 0;
   9      size_t last = nlen - 1;
   10
   11      for(i = 0; i < UCHAR_MAX + 1; i++) {
   12          skip_chars[i] = nlen;
   13      }
   14
   15      for (i = 0; i < last; i++) {
   16          skip_chars[needle[i]] = last - i;
   17      }
   18  }
   19
   20
   21  static inline const unsigned char *String_base_search(
   22          const unsigned char *haystack, ssize_t hlen,
   23          const unsigned char *needle, ssize_t nlen,
   24          size_t *skip_chars)
   25  {
   26      size_t i = 0;
   27      size_t last = nlen - 1;
   28
   29      assert(haystack != NULL && "Given bad haystack to search.");
   30      assert(needle != NULL && "Given bad needle to search for.");
   31
   32      check(nlen > 0, "nlen can't be <= 0");
   33      check(hlen > 0, "hlen can't be <= 0");
   34
   35      while (hlen >= nlen)
   36      {
   37          for (i = last; haystack[i] == needle[i]; i--) {
   38              if (i == 0) {
   39                  return haystack;
   40              }
   41          }
   42
   43          hlen -= skip_chars[haystack[last]];
   44          haystack += skip_chars[haystack[last]];
   45      }
   46
   47  error: // fallthrough
   48      return NULL;
   49  }
   50
   51  int String_find(bstring in, bstring what)
   52  {
   53      const unsigned char *found = NULL;
   54
   55      const unsigned char *haystack = (const unsigned char *)bdata(in
   );
   56      ssize_t hlen = blength(in);
   57      const unsigned char *needle = (const unsigned char *)bdata(what
   );
   58      ssize_t nlen = blength(what);
   59      size_t skip_chars[UCHAR_MAX + 1] = {0};
   60
   61      String_setup_skip_chars(skip_chars, needle, nlen);
   62
   63      found = String_base_search(haystack, hlen, needle, nlen, skip_c
   hars);
   64
   65      return found != NULL ? found - haystack : -1;
   66  }
   67
   68  StringScanner *StringScanner_create(bstring in)
   69  {
   70      StringScanner *scan = calloc(1, sizeof(StringScanner));
   71      check_mem(scan);
   72
   73      scan->in = in;
   74      scan->haystack = (const unsigned char *)bdata(in);
   75      scan->hlen = blength(in);
   76
   77      assert(scan != NULL && "fuck");
   78      return scan;
   79
   80  error:
   81      free(scan);
   82      return NULL;
   83  }
   84
   85  static inline void StringScanner_set_needle(StringScanner *scan, bs
   tring tofind)
   86  {
   87      scan->needle = (const unsigned char *)bdata(tofind);
   88      scan->nlen = blength(tofind);
   89
   90      String_setup_skip_chars(scan->skip_chars, scan->needle, scan->n
   len);
   91  }
   92
   93  static inline void StringScanner_reset(StringScanner *scan)
   94  {
   95      scan->haystack = (const unsigned char *)bdata(scan->in);
   96      scan->hlen = blength(scan->in);
   97  }
   98
   99  int StringScanner_scan(StringScanner *scan, bstring tofind)
   100  {
   101      const unsigned char *found = NULL;
   102      ssize_t found_at = 0;
   103
   104      if(scan->hlen <= 0) {
   105          StringScanner_reset(scan);
   106          return -1;
   107      }
   108
   109      if((const unsigned char *)bdata(tofind) != scan->needle) {
   110          StringScanner_set_needle(scan, tofind);
   111      }
   112
   113      found = String_base_search(
   114              scan->haystack, scan->hlen,
   115              scan->needle, scan->nlen,
   116              scan->skip_chars);
   117
   118      if(found) {
   119          found_at = found - (const unsigned char *)bdata(scan->in);
   120          scan->haystack = found + scan->nlen;
   121          scan->hlen -= found_at - scan->nlen;
   122      } else {
   123          // done, reset the setup
   124          StringScanner_reset(scan);
   125          found_at = -1;
   126      }
   127
   128      return found_at;
   129  }
   130
   131
   132  void StringScanner_destroy(StringScanner *scan)
   133  {
   134      if(scan) {
   135          free(scan);
   136      }
   137  }
     __________________________________________________________________

   The entire algorithm is in two static inline functions called
   String_setup_skip_chars and String_base_search. These are then used in
   the other functions to actually implement the searching styles I want.
   Study these first two functions and compare them to the Wikipedia
   description so you know what's going on.

   The String_find then just uses these two functions to do a find and
   return the position found. It's very simple and I'll use it to see how
   this "build skip chars" phase impacts real practical performance. Keep
   in mind that you could maybe make this faster, but I'm teaching you how
   to confirm theoretical speed after you implement an algorithm.

   The StringScanner_scan function is then following the common pattern I
   use of "create, scan, destroy" and is used to incrementally scan a
   string for another string. You'll see how this is used when I show you
   the unit test that will test this out.

   Finally, I have the unit test that first confirms this is all working,
   then runs simple performance tests for all three finding algorithms in
   a commented out section.
     __________________________________________________________________

   Source 125: tests/string_algos_tests.c
   1  #include "minunit.h"
   2  #include <lcthw/string_algos.h>
   3  #include <lcthw/bstrlib.h>
   4  #include <time.h>
   5
   6  struct tagbstring IN_STR = bsStatic("I have ALPHA beta ALPHA and ora
   nges ALPHA");
   7  struct tagbstring ALPHA = bsStatic("ALPHA");
   8  const int TEST_TIME = 1;
   9
   10  char *test_find_and_scan()
   11  {
   12      StringScanner *scan = StringScanner_create(&IN_STR);
   13      mu_assert(scan != NULL, "Failed to make the scanner.");
   14
   15      int find_i = String_find(&IN_STR, &ALPHA);
   16      mu_assert(find_i > 0, "Failed to find 'ALPHA' in test string.")
   ;
   17
   18      int scan_i = StringScanner_scan(scan, &ALPHA);
   19      mu_assert(scan_i > 0, "Failed to find 'ALPHA' with scan.");
   20      mu_assert(scan_i == find_i, "find and scan don't match");
   21
   22      scan_i = StringScanner_scan(scan, &ALPHA);
   23      mu_assert(scan_i > find_i, "should find another ALPHA after the
    first");
   24
   25      scan_i = StringScanner_scan(scan, &ALPHA);
   26      mu_assert(scan_i > find_i, "should find another ALPHA after the
    first");
   27
   28      mu_assert(StringScanner_scan(scan, &ALPHA) == -1, "shouldn't fi
   nd it");
   29
   30      StringScanner_destroy(scan);
   31
   32      return NULL;
   33  }
   34
   35  char *test_binstr_performance()
   36  {
   37      int i = 0;
   38      int found_at = 0;
   39      unsigned long find_count = 0;
   40      time_t elapsed = 0;
   41      time_t start = time(NULL);
   42
   43      do {
   44          for(i = 0; i < 1000; i++) {
   45              found_at = binstr(&IN_STR, 0, &ALPHA);
   46              mu_assert(found_at != BSTR_ERR, "Failed to find!");
   47              find_count++;
   48          }
   49
   50          elapsed = time(NULL) - start;
   51      } while(elapsed <= TEST_TIME);
   52
   53      debug("BINSTR COUNT: %lu, END TIME: %d, OPS: %f",
   54              find_count, (int)elapsed, (double)find_count / elapsed)
   ;
   55      return NULL;
   56  }
   57
   58  char *test_find_performance()
   59  {
   60      int i = 0;
   61      int found_at = 0;
   62      unsigned long find_count = 0;
   63      time_t elapsed = 0;
   64      time_t start = time(NULL);
   65
   66      do {
   67          for(i = 0; i < 1000; i++) {
   68              found_at = String_find(&IN_STR, &ALPHA);
   69              find_count++;
   70          }
   71
   72          elapsed = time(NULL) - start;
   73      } while(elapsed <= TEST_TIME);
   74
   75      debug("FIND COUNT: %lu, END TIME: %d, OPS: %f",
   76              find_count, (int)elapsed, (double)find_count / elapsed)
   ;
   77
   78      return NULL;
   79  }
   80
   81  char *test_scan_performance()
   82  {
   83      int i = 0;
   84      int found_at = 0;
   85      unsigned long find_count = 0;
   86      time_t elapsed = 0;
   87      StringScanner *scan = StringScanner_create(&IN_STR);
   88
   89      time_t start = time(NULL);
   90
   91      do {
   92          for(i = 0; i < 1000; i++) {
   93              found_at = 0;
   94
   95              do {
   96                  found_at = StringScanner_scan(scan, &ALPHA);
   97                  find_count++;
   98              } while(found_at != -1);
   99          }
   100
   101          elapsed = time(NULL) - start;
   102      } while(elapsed <= TEST_TIME);
   103
   104      debug("SCAN COUNT: %lu, END TIME: %d, OPS: %f",
   105              find_count, (int)elapsed, (double)find_count / elapsed
   );
   106
   107      StringScanner_destroy(scan);
   108
   109      return NULL;
   110  }
   111
   112
   113  char *all_tests()
   114  {
   115      mu_suite_start();
   116
   117      mu_run_test(test_find_and_scan);
   118
   119      // this is an idiom for commenting out sections of code
   120  #if 0
   121      mu_run_test(test_scan_performance);
   122      mu_run_test(test_find_performance);
   123      mu_run_test(test_binstr_performance);
   124  #endif
   125
   126      return NULL;
   127  }
   128
   129  RUN_TESTS(all_tests);
     __________________________________________________________________

   I have it written here with #if 0 which is a way to use the CPP to
   comment out a section of code. Type it in like this, and then remove
   that and the #endif so you can see these performance tests run. When
   you continue with the book, simply comment these out so that the test
   doesn't waste development time.

   There's nothing amazing in this unit test, it just runs each of the
   different functions in loops that last long enough to get a few seconds
   of sampling. The first test (test_find_and_scan) just confirms that
   what I've written works, because there's no point in testing the speed
   of something that doesn't work. Then the next three functions run a
   large number of searches using each of the three functions.

   The trick to notice is that I grab the starting time in start, and then
   I loop until at least TEST_TIME seconds have passed. This makes sure
   that I get enough samples to work with in comparing the three. I'll
   then run this test with different TEST_TIME settings and analyze the
   results.

40.1 What You Should See

   When I run this test on my laptop, I get number that look like this:
     __________________________________________________________________

   Source 126: 2 Second Test Run
   1  $ ./tests/string_algos_tests
   2  DEBUG tests/string_algos_tests.c:124: ----- RUNNING: ./tests/string_
   algos_tests
   3  ----
   4  RUNNING: ./tests/string_algos_tests
   5  DEBUG tests/string_algos_tests.c:116:
   6  ----- test_find_and_scan
   7  DEBUG tests/string_algos_tests.c:117:
   8  ----- test_scan_performance
   9  DEBUG tests/string_algos_tests.c:105: SCAN COUNT: 110272000, END TIM
   E: 2, OPS: 55136000.000000
   10  DEBUG tests/string_algos_tests.c:118:
   11  ----- test_find_performance
   12  DEBUG tests/string_algos_tests.c:76: FIND COUNT: 12710000, END TIME
   : 2, OPS: 6355000.000000
   13  DEBUG tests/string_algos_tests.c:119:
   14  ----- test_binstr_performance
   15  DEBUG tests/string_algos_tests.c:54: BINSTR COUNT: 72736000, END TI
   ME: 2, OPS: 36368000.000000
   16  ALL TESTS PASSED
   17  Tests run: 4
   18  $
     __________________________________________________________________

   I look at this and I sort of want to do more than 2 seconds of each
   run, and I want to run this many times then use R to check it out like
   I did before. Here's what I get for 10 samples of about 10 seconds
   each:
     __________________________________________________________________

   Source 127: 10 Runs At 10 Seconds, Operations / Second
     scan find binstr
     71195200 6353700 37110200
     75098000 6358400 37420800
     74910000 6351300 37263600
     74859600 6586100 37133200
     73345600 6365200 37549700
     74754400 6358000 37162400
     75343600 6630400 37075000
     73804800 6439900 36858700
     74995200 6384300 36811700
     74781200 6449500 37383000
     __________________________________________________________________

   The way I got this is with a little bit of shell help and then editing
   the output:
     __________________________________________________________________

   Source 128: Getting Timing Logs
   1  $ for i in 1 2 3 4 5 6 7 8 9 10; do echo "RUN --- $i" >> times.log;
   ./tests/string_algos_tests 2>&1 | grep COUNT >> times.log ; done
   2  $ less times.log
   3  $ vim times.log
     __________________________________________________________________

   Right away you can see that the scanning system beats the pants off
   both of the others, but I'll open this in R and confirm the results:
     __________________________________________________________________

   Source 129: R Summary Of Operations/Second
   1  > times <- read.table("times.log", header=T)
   2  > summary(times)
   3        scan               find             binstr
   4   Min.   :71195200   Min.   :6351300   Min.   :36811700
   5   1st Qu.:74042200   1st Qu.:6358100   1st Qu.:37083800
   6   Median :74820400   Median :6374750   Median :37147800
   7   Mean   :74308760   Mean   :6427680   Mean   :37176830
   8   3rd Qu.:74973900   3rd Qu.:6447100   3rd Qu.:37353150
   9   Max.   :75343600   Max.   :6630400   Max.   :37549700
   10  >
     __________________________________________________________________

   To understand why I'm getting the summary statistics I have to explain
   some statistics for you. What I'm looking for in these numbers can be
   said simply to be, "Are these three functions (scan, find, bsinter)
   actually different?" I know that each time I run my tester function I
   get slightly different numbers, and that those numbers can cover a
   certain range. You see here that the 1st and 3rd quarters do that for
   each sample.

   What I look at first is the mean and I want to see if each sample's
   mean is different from the others. I can see that, and clearly the scan
   beats binstr which also beats find. However, I have a problem, if I use
   just the mean, there's a chance that the ranges of each sample might
   overlap.

   What if I have means that are different, but the 1st and 3rd quarters
   overlap? In that case I could say that there's a chance that if I ran
   the samples again the means might not be different. The more overlap I
   have in the ranges the higher probability that my two samples (and my
   two functions) are not actually different. Any difference I'm seeing in
   the two (in this case three) is just random chance.

   Statistics has many tools to solve this problem, but in our case I can
   just look at the 1st and 3rd quarters as well as the mean for all three
   samples. If the means are different and the quarters are way off never
   possibly overlapping, then it's alright to say they are different.

   In my three samples I can say that scan, find and binstr are different,
   don't overlap in range, and that I can trust the sample (for the most
   part).

40.2 Analyzing The Results

   Looking at the results I can see that String_find is much slower than
   the other two. In fact, so slow I'd think there's something wrong with
   how I implemented it. However when I compare it with StringScanner_scan
   I can see that it's the part that builds the skip list that is most
   likely costing the time. Not only is find slower, it's also doing less
   than scan because it's just finding the first string while scan finds
   all of them.

   I can also see that scan beats binstr as well by quite a large margin.
   Again I can say that not only does scan do more than both of these, but
   it's also much faster.

   There's a few caveats with this analysis:

    1. I may have messed up this implementation or the test. At this point
       I would go research all the possible ways to do a BMH algorithm and
       try to improve it. I would also confirm that I'm doing the test
       right.
    2. If you alter the time the test runs, you get different results.
       There is a "warm up" period I'm not investigating.
    3. The test_scan_performance unit test isn't quite the same as the
       others, but it is doing more than the other tests so it's probably
       alright.
    4. I'm only doing the test by searching for one string in another. I
       could randomize the strings to find to remove their position and
       length as a confounding factor.
    5. Maybe binstr is implemented better than "simple" brute force.
    6. I could be running these in an unfortunate order and maybe
       randomizing which test runs first will give better results.

   One thing to gather from this is you need to confirm real performance
   even if you implement an algorithm "correctly". In this case the claim
   is that the BMH algorithm should have beaten the binstr algorithm, but
   a simple test proved it didn't. Had I not done this I would have been
   using an inferior algorithm implementation without knowing it. With
   these metrics I can start to tune my implementation, or simply scrap it
   and find another one.

40.3 Extra Credit

    1. See if you can make the Scan_find faster. Why is my implementation
       here slow?
    2. Try some different scan times and see if you get different numbers.
       What impact does the length of time that you run the test have on
       the scan times? What can you say about that result?
    3. Alter the unit test so that it runs each function for a short burst
       in the beginning to clear out any "warm up" period, then start the
       timing portion. Does that change the dependence on the length of
       time the test runs and how many operations / second are possible?
    4. Make the unit test randomize the strings to find and then measure
       the performance you get. One way to do this is use the bsplit
       function from bstrlib.h to split the IN_STR on spaces. Then use the
       bstrList struct you get to access each string it returns. This will
       also teach you how to use bstrList operations for string
       processing.
    5. Try some runs with the tests in different orders and see if you get
       different results.

   [next] [prev] [prev-tail] [front] [up]
     __________________________________________________________________

   Please enable JavaScript to view the comments powered by Disqus.

Take An Online Video Course

   You can sign up for a video course at:

   http://www.udemy.com/learn-c-the-hard-way/

   This course is currently being built at the same time that the book is
   being built, but if you sign up now then you get early access to both
   the videos and PDF of the book.

Related Books

   You might want to check out these other books in the series:
    1. Learn Ruby The Hard Way
    2. Learn Regex The Hard Way
    3. Learn SQL The Hard Way
    4. Learn C The Hard Way
    5. Learn Python The Hard Way

   I'll be referencing other books shortly.

   Copyright 2011 Zed A. Shaw. All Rights Reserved.
