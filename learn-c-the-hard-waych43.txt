
   Learn C The Hard Way A Learn Code The Hard Way Book
     * Book
     * Comments
     * Video Courses
     * Related Books

   [next] [prev] [prev-tail] [tail] [up]

Chapter 43
Exercise 42: Stacks and Queues

   At this point in the book you know most of the data structures that are
   used to build all the other data structures. If you have some kind of
   List, DArray, Hashmap, and Tree then you can build most anything else
   that's out there. Everything else you run into either uses these or is
   some variant on these. If it's not then it's most likely an exotic data
   structure that you probably will not need.

   Stacks and Queues are very simple data structures that are really
   variants of the List data structure. All they are is using a List with
   a "discipline" or convention that says you'll always place elements on
   one end of the List. For a Stack, you always push and pop. For a Queue,
   you always shift to the front, but pop from the end.

   I can implement both data structures using nothing but the CPP and two
   header files. My header files are 21 lines long and do all the Stack
   and Queue operations without any fancy defines.

   To see if you've been paying attention, I'm going to show you the unit
   tests, and then you have to implement the header files needed to make
   them work. To pass this exercise you can't create any stack.c or
   queue.c implementation files. Use only the stack.h and queue.h files to
   make the tests runs.
     __________________________________________________________________

   Source 139: tests/stack_tests.c
   1  #include "minunit.h"
   2  #include <lcthw/stack.h>
   3  #include <assert.h>
   4
   5  static Stack *stack = NULL;
   6  char *tests[] = {"test1 data", "test2 data", "test3 data"};
   7  #define NUM_TESTS 3
   8
   9
   10  char *test_create()
   11  {
   12      stack = Stack_create();
   13      mu_assert(stack != NULL, "Failed to create stack.");
   14
   15      return NULL;
   16  }
   17
   18  char *test_destroy()
   19  {
   20      mu_assert(stack != NULL, "Failed to make stack #2");
   21      Stack_destroy(stack);
   22
   23      return NULL;
   24  }
   25
   26  char *test_push_pop()
   27  {
   28      int i = 0;
   29      for(i = 0; i < NUM_TESTS; i++) {
   30          Stack_push(stack, tests[i]);
   31          mu_assert(Stack_peek(stack) == tests[i], "Wrong next value.
   ");
   32      }
   33
   34      mu_assert(Stack_count(stack) == NUM_TESTS, "Wrong count on push
   .");
   35
   36      STACK_FOREACH(stack, cur) {
   37          debug("VAL: %s", (char *)cur->value);
   38      }
   39
   40      for(i = NUM_TESTS - 1; i >= 0; i--) {
   41          char *val = Stack_pop(stack);
   42          mu_assert(val == tests[i], "Wrong value on pop.");
   43      }
   44
   45      mu_assert(Stack_count(stack) == 0, "Wrong count after pop.");
   46
   47      return NULL;
   48  }
   49
   50  char *all_tests() {
   51      mu_suite_start();
   52
   53      mu_run_test(test_create);
   54      mu_run_test(test_push_pop);
   55      mu_run_test(test_destroy);
   56
   57      return NULL;
   58  }
   59
   60  RUN_TESTS(all_tests);
     __________________________________________________________________

   Then the queue_tests.c is almost the same just using Queue:
     __________________________________________________________________

   Source 140: tests/queue_tests.c
   1  #include "minunit.h"
   2  #include <lcthw/queue.h>
   3  #include <assert.h>
   4
   5  static Queue *queue = NULL;
   6  char *tests[] = {"test1 data", "test2 data", "test3 data"};
   7  #define NUM_TESTS 3
   8
   9
   10  char *test_create()
   11  {
   12      queue = Queue_create();
   13      mu_assert(queue != NULL, "Failed to create queue.");
   14
   15      return NULL;
   16  }
   17
   18  char *test_destroy()
   19  {
   20      mu_assert(queue != NULL, "Failed to make queue #2");
   21      Queue_destroy(queue);
   22
   23      return NULL;
   24  }
   25
   26  char *test_send_recv()
   27  {
   28      int i = 0;
   29      for(i = 0; i < NUM_TESTS; i++) {
   30          Queue_send(queue, tests[i]);
   31          mu_assert(Queue_peek(queue) == tests[0], "Wrong next value.
   ");
   32      }
   33
   34      mu_assert(Queue_count(queue) == NUM_TESTS, "Wrong count on send
   .");
   35
   36      QUEUE_FOREACH(queue, cur) {
   37          debug("VAL: %s", (char *)cur->value);
   38      }
   39
   40      for(i = 0; i < NUM_TESTS; i++) {
   41          char *val = Queue_recv(queue);
   42          mu_assert(val == tests[i], "Wrong value on recv.");
   43      }
   44
   45      mu_assert(Queue_count(queue) == 0, "Wrong count after recv.");
   46
   47      return NULL;
   48  }
   49
   50  char *all_tests() {
   51      mu_suite_start();
   52
   53      mu_run_test(test_create);
   54      mu_run_test(test_send_recv);
   55      mu_run_test(test_destroy);
   56
   57      return NULL;
   58  }
   59
   60  RUN_TESTS(all_tests);
     __________________________________________________________________

43.1 What You Should See

   Your unit test should run without you changing the tests, and it should
   pass valgrind with no memory errors. Here's what it looks like if I run
   stack_tests directly:
     __________________________________________________________________

   Source 141: stack_tests run
   1  $ ./tests/stack_tests
   2  DEBUG tests/stack_tests.c:60: ----- RUNNING: ./tests/stack_tests
   3  ----
   4  RUNNING: ./tests/stack_tests
   5  DEBUG tests/stack_tests.c:53:
   6  ----- test_create
   7  DEBUG tests/stack_tests.c:54:
   8  ----- test_push_pop
   9  DEBUG tests/stack_tests.c:37: VAL: test3 data
   10  DEBUG tests/stack_tests.c:37: VAL: test2 data
   11  DEBUG tests/stack_tests.c:37: VAL: test1 data
   12  DEBUG tests/stack_tests.c:55:
   13  ----- test_destroy
   14  ALL TESTS PASSED
   15  Tests run: 3
   16  $
     __________________________________________________________________

   The queue_test is basically the same kind of output so I shouldn't have
   to show it to you at this stage.

43.2 How To Improve It

   The only real improvement you could make to this is to switch from
   using a List to using a DArray. The Queue data structure is more
   difficult to do with a DArray because it works at both ends of the list
   of nodes.

   A disadvantage of doing this entirely in a header file is that you
   can't easily performance tune it. Mostly what you're doing with this
   technique is establishing a "protocol" for how to use a List in a
   certain style. When performance tuning, if you make List fast then
   these two should improve as well.

43.3 Extra Credit

    1. Implement Stack using DArray instead of List without changing the
       unit test. That means you'll have to create your own STACK_FOREACH.

   [next] [prev] [prev-tail] [front] [up]
     __________________________________________________________________

   Please enable JavaScript to view the comments powered by Disqus.

Take An Online Video Course

   You can sign up for a video course at:

   http://www.udemy.com/learn-c-the-hard-way/

   This course is currently being built at the same time that the book is
   being built, but if you sign up now then you get early access to both
   the videos and PDF of the book.

Related Books

   You might want to check out these other books in the series:
    1. Learn Ruby The Hard Way
    2. Learn Regex The Hard Way
    3. Learn SQL The Hard Way
    4. Learn C The Hard Way
    5. Learn Python The Hard Way

   I'll be referencing other books shortly.

   Copyright 2011 Zed A. Shaw. All Rights Reserved.
